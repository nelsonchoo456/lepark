// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StaffRoleEnum {
  MANAGER
  BOTANIST
  ARBORIST
  GARDENER
  MAINTENANCE_WORKER
  CLEANER
  LANDSCAPE_ARCHITECT
  PARK_RANGER
}

model Staff {
  id            String        @id @default(uuid()) @db.Uuid
  firstName     String
  lastName      String
  email         String        @unique
  password      String
  contactNumber String
  role          StaffRoleEnum
  isActive      Boolean
}

enum ConservationStatusEnum {
  LEAST_CONCERN
  NEAR_THREATENED
  VULNERABLE
  ENDANGERED
  CRITICALLY_ENDANGERED
  EXTINCT_IN_THE_WILD
  EXTINCT
}

enum LightTypeEnum {
  FULL_SUN
  PARTIAL_SHADE
  FULL_SHADE
}

enum SoilTypeEnum {
  SANDY
  CLAYEY
  LOAMY
}

model Species {
  id                    String                 @id @default(uuid()) @db.Uuid
  phylum                String
  class                 String
  order                 String
  family                String
  genus                 String
  speciesName           String
  commonName            String
  speciesDescription    String
  conservationStatus    ConservationStatusEnum
  originCountry         String
  lightType             LightTypeEnum
  soilType              SoilTypeEnum
  fertiliserType        String
  images                String[]
  waterRequirement      Int
  fertiliserRequirement Int
  idealHumidity         Float
  minTemp               Float
  maxTemp               Float
  idealTemp             Float
  isDroughtTolerant     Boolean
  isFastGrowing         Boolean
  isSlowGrowing         Boolean
  isEdible              Boolean
  isDeciduous           Boolean
  isEvergreen           Boolean
  isToxic               Boolean
  isFragrant            Boolean
  occurrences           Occurrence[]
  favoritedBy Visitor[] @relation("VisitorFavoriteSpecies")
}

enum DecarbonizationTypeEnum {
  TREE_TROPICAL
  TREE_MANGROVE
  SHRUB
}

enum OccurrenceStatusEnum {
  HEALTHY
  MONITOR_AFTER_TREATMENT
  NEEDS_ATTENTION
  URGENT_ACTION_REQUIRED
  REMOVED
}

model Occurrence {
  id                  String                  @id @default(uuid()) @db.Uuid
  lat                 Float?
  lng                 Float?
  title               String
  dateObserved        DateTime
  dateOfBirth         DateTime?
  numberOfPlants      Float
  biomass             Float
  description         String
  occurrenceStatus    OccurrenceStatusEnum
  decarbonizationType DecarbonizationTypeEnum
  speciesId           String                  @db.Uuid
  // decarbonizationAreaId String @db.Uuid
  images              String[]
  activityLogs        ActivityLog[]
  statusLogs          StatusLog[]

  species Species @relation(fields: [speciesId], references: [id], onDelete: Cascade)
  // decarbonizationArea DecarbonizationArea @relation(fields: [decarbonizationAreaId], references: [id], onDelete: Cascade)
}

enum ActivityLogTypeEnum {
  WATERED
  TRIMMED
  FERTILIZED
  PRUNED
  REPLANTED
  CHECKED_HEALTH
  TREATED_PESTS
  SOIL_REPLACED
  HARVESTED
  STAKED
  MULCHED
  MOVED
  CHECKED
  ADDED_COMPOST
  OTHERS
}

model ActivityLog {
  id              String              @id @default(uuid()) @db.Uuid
  name            String
  description     String
  dateCreated     DateTime
  images          String[]
  activityLogType ActivityLogTypeEnum
  occurrenceId    String              @map("occurrenceId") @db.Uuid

  occurrence Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
}

model StatusLog {
  id            String               @id @default(uuid()) @db.Uuid
  name          String
  description   String
  dateCreated   DateTime
  images        String[]
  statusLogType OccurrenceStatusEnum
  occurrenceId  String               @map("occurrenceId") @db.Uuid

  occurrence Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
}

// model DecarbonizationArea {
//   id                  String   @id @default(uuid()) @db.Uuid
//   carbonSeqValue      Float
//   startDate           DateTime
//   endDate             DateTime
//   carbonSeqFactor     Float
//   dailyCarbonSeqValye Float
//   totalBiomass        Float
//   occurrenceId         String

//   occurrences Occurrence[]
// }

// enum PARK_STATUS_ENUM {
//   OPEN 
//   CLOSED
//   UNDER_CONSTRUCTION
//   LIMITED_ACCESS
// }

// model Park {
//   id           Int     @id @default(autoincrement())
//   name         String
//   description  String
//   parkStatus   PARK_STATUS_ENUM
//   openingHours DateTime[]
//   closingHours DateTime[]
//   geom         String
//   paths        String
// }

model Visitor {
  id                 String   @id @default(uuid()) @db.Uuid
  firstName          String
  lastName           String
  email              String   @unique
  password           String
  contactNumber      String
  favoriteSpecies Species[] @relation("VisitorFavoriteSpecies")
}
