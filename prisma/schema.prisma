// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StaffRoleEnum {
  MANAGER
  BOTANIST
  ARBORIST
  LANDSCAPE_ARCHITECT
  PARK_RANGER
  VENDOR_MANAGER
  SUPERADMIN
}

model Staff {
  id                  String        @id @default(uuid()) @db.Uuid
  firstName           String
  lastName            String
  email               String        @unique
  password            String
  contactNumber       String
  role                StaffRoleEnum
  isActive            Boolean
  parkId              Int? 
  isFirstLogin        Boolean
  resetTokenUsed      Boolean       @default(false)
  resetToken          String?
  assignedPlantTasks  PlantTask[]   @relation("assignedStaff")
  submittedPlantTasks PlantTask[]   @relation("submittingStaff")
}

enum ConservationStatusEnum {
  LEAST_CONCERN
  NEAR_THREATENED
  VULNERABLE
  ENDANGERED
  CRITICALLY_ENDANGERED
  EXTINCT_IN_THE_WILD
  EXTINCT
}

enum LightTypeEnum {
  FULL_SUN
  PARTIAL_SHADE
  FULL_SHADE
}

enum SoilTypeEnum {
  SANDY
  CLAYEY
  LOAMY
}

model Species {
  id                    String                 @id @default(uuid()) @db.Uuid
  phylum                String
  class                 String
  order                 String
  family                String
  genus                 String
  speciesName           String                 @unique
  commonName            String
  speciesDescription    String
  conservationStatus    ConservationStatusEnum
  originCountry         String
  lightType             LightTypeEnum
  soilType              SoilTypeEnum
  fertiliserType        String
  images                String[]
  waterRequirement      Int
  fertiliserRequirement Int
  idealHumidity         Float
  minTemp               Float
  maxTemp               Float
  idealTemp             Float
  isDroughtTolerant     Boolean
  isFastGrowing         Boolean
  isSlowGrowing         Boolean
  isEdible              Boolean
  isDeciduous           Boolean
  isEvergreen           Boolean
  isToxic               Boolean
  isFragrant            Boolean
  occurrences           Occurrence[]
  favoritedBy           Visitor[]              @relation("VisitorfavoriteSpecies")
}

enum DecarbonizationTypeEnum {
  TREE_TROPICAL
  TREE_MANGROVE
  SHRUB
}

enum OccurrenceStatusEnum {
  HEALTHY
  MONITOR_AFTER_TREATMENT
  NEEDS_ATTENTION
  URGENT_ACTION_REQUIRED
  REMOVED
}

model Occurrence {
  id                  String                  @id @default(uuid()) @db.Uuid
  lat                 Float?
  lng                 Float?
  title               String
  dateObserved        DateTime
  dateOfBirth         DateTime?
  numberOfPlants      Float
  biomass             Float
  description         String?
  occurrenceStatus    OccurrenceStatusEnum
  decarbonizationType DecarbonizationTypeEnum
  speciesId           String                  @db.Uuid
  zoneId              Int
  plantTasks          PlantTask[]

  // decarbonizationAreaId String @db.Uuid
  images       String[]
  activityLogs ActivityLog[]
  statusLogs   StatusLog[]

  species Species @relation(fields: [speciesId], references: [id], onDelete: Cascade)
  // decarbonizationArea DecarbonizationArea @relation(fields: [decarbonizationAreaId], references: [id], onDelete: Cascade)

  @@index([zoneId])
}

enum ActivityLogTypeEnum {
  WATERED
  TRIMMED
  FERTILIZED
  PRUNED
  REPLANTED
  CHECKED_HEALTH
  PEST_MONITORING
  SOIL_REPLACED
  HARVESTED
  STAKED
  MULCHED
  MOVED
  CHECKED
  ADDED_COMPOST
  SHADE_ADJUSTMENT
  PLANT_PROPAGATION
  LIGHT_EXPOSURE_CHECK
  WATERING_ADJUSTMENT
  OTHERS
}

model ActivityLog {
  id              String              @id @default(uuid()) @db.Uuid
  name            String
  description     String
  dateCreated     DateTime
  images          String[]
  activityLogType ActivityLogTypeEnum
  occurrenceId    String              @map("occurrenceId") @db.Uuid

  occurrence Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
}

model StatusLog {
  id            String               @id @default(uuid()) @db.Uuid
  name          String
  description   String
  dateCreated   DateTime
  images        String[]
  statusLogType OccurrenceStatusEnum
  occurrenceId  String               @map("occurrenceId") @db.Uuid

  occurrence Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
}

enum AttractionStatusEnum {
  OPEN
  CLOSED
  UNDER_MAINTENANCE
}

model Attraction {
  id           String               @id @default(uuid()) @db.Uuid
  title        String
  description  String
  openingHours DateTime[]
  closingHours DateTime[]
  images       String[]
  status       AttractionStatusEnum
  lat          Float?
  lng          Float?
  parkId       Int

  @@index([parkId])
}

enum EventStatusEnum {
  ONGOING
  UPCOMING
  COMPLETED
  CANCELLED
}

enum EventTypeEnum {
  WORKSHOP
  EXHIBITION
  GUIDED_TOUR
  PERFORMANCE
  TALK
  COMPETITION
  FESTIVAL
  CONFERENCE
}

enum EventSuitabilityEnum {
  ANYONE
  FAMILIES_AND_FRIENDS
  CHILDREN
  NATURE_ENTHUSIASTS
  PETS
  FITNESS_ENTHUSIASTS
}

model Event {
  id          String               @id @default(uuid()) @db.Uuid
  title       String
  description String
  type        EventTypeEnum
  suitability EventSuitabilityEnum
  startDate   DateTime
  endDate     DateTime
  startTime   DateTime
  endTime     DateTime
  maxCapacity Int
  images      String[]
  status      EventStatusEnum
  facilityId  String               @db.Uuid

  facility Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@index([facilityId])
}

// model DecarbonizationArea {
//   id                  String   @id @default(uuid()) @db.Uuid
//   carbonSeqValue      Float
//   startDate           DateTime
//   endDate             DateTime
//   carbonSeqFactor     Float
//   dailyCarbonSeqValye Float
//   totalBiomass        Float
//   occurrenceId         String

//   occurrences Occurrence[]
// }

model Visitor {
  id                 String      @id @default(uuid()) @db.Uuid
  firstName          String
  lastName           String
  email              String      @unique
  password           String
  contactNumber      String
  favoriteSpecies    Species[]   @relation("VisitorfavoriteSpecies")
  promotionsRedeemed Promotion[] @relation("VisitorPromotionsRedeemed")
  isVerified         Boolean
  resetToken         String?
  resetTokenUsed     Boolean     @default(false)
}

enum HubStatusEnum {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
  DECOMMISSIONED
}

model Hub {
  id                       String        @id @default(uuid()) @db.Uuid
  identifierNumber         String        @unique
  serialNumber             String        @unique
  name                     String
  description              String?
  hubStatus                HubStatusEnum
  acquisitionDate          DateTime
  lastMaintenanceDate      DateTime?
  nextMaintenanceDate      DateTime?
  dataTransmissionInterval Float? // might want to initialize this in pi during verifyInitialization
  supplier                 String
  supplierContactNumber    String
  ipAddress                String?
  macAddress               String?
  radioGroup               Int?
  hubSecret                String?
  images                   String[]
  lat                      Float?
  long                     Float?
  remarks                  String?
  zoneId                   Int?
  facilityId               String?       @db.Uuid
  facility                 Facility?     @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  lastDataUpdateDate       DateTime?     // Add this line

  maintenanceHistory MaintenanceHistory[]
  sensors            Sensor[]

  //facility Facility? @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@index([zoneId])
}

enum SensorTypeEnum {
  TEMPERATURE
  HUMIDITY
  SOIL_MOISTURE
  LIGHT
  CAMERA
}

enum SensorStatusEnum {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
  DECOMMISSIONED
}

enum SensorUnitEnum {
  PERCENT
  DEGREES_CELSIUS
  VOLUMETRIC_WATER_CONTENT
  LUX
  PAX
  // Add other units as needed
}

model Sensor {
  id                       String               @id @default(uuid()) @db.Uuid
  name                     String
  identifierNumber         String               @unique
  serialNumber             String               @unique
  sensorType               SensorTypeEnum
  description              String?
  sensorStatus             SensorStatusEnum
  acquisitionDate          DateTime
  lastMaintenanceDate      DateTime?
  nextMaintenanceDate      DateTime?
  sensorUnit               SensorUnitEnum
  supplier                 String
  supplierContactNumber    String
  images                   String[]
  lat                      Float?
  long                     Float?
  remarks                  String?
  hubId                    String?              @db.Uuid
  hub                      Hub?                 @relation(fields: [hubId], references: [id])
  facilityId               String?              @db.Uuid
  facility                 Facility?            @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  maintenanceHistory       MaintenanceHistory[]
  sensorReadings           SensorReading[]
}

model SensorReading {
  id       String   @id @default(uuid()) @db.Uuid
  date     DateTime
  value    Float
  sensorId String   @db.Uuid
  sensor   Sensor   @relation(fields: [sensorId], references: [id], onDelete: Cascade)
}

enum ParkAssetTypeEnum {
  PLANT_TOOL_AND_EQUIPMENT
  HOSES_AND_PIPES
  INFRASTRUCTURE
  LANDSCAPING
  GENERAL_TOOLS
  SAFETY
  DIGITAL
  EVENT
}

enum ParkAssetStatusEnum {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  DECOMMISSIONED
}

enum ParkAssetConditionEnum {
  EXCELLENT
  FAIR
  POOR
  DAMAGED
}

model ParkAsset {
  id                    String                 @id @default(uuid()) @db.Uuid
  identifierNumber      String                 @unique
  serialNumber          String?                @unique
  name                  String
  parkAssetType         ParkAssetTypeEnum
  description           String?
  parkAssetStatus       ParkAssetStatusEnum
  acquisitionDate       DateTime
  lastMaintenanceDate   DateTime? // Keep this field
  nextMaintenanceDate   DateTime? // Keep this field
  supplier              String
  supplierContactNumber String
  parkAssetCondition    ParkAssetConditionEnum
  images                String[]
  remarks               String?
  facilityId            String                 @db.Uuid
  facility              Facility               @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  maintenanceHistory    MaintenanceHistory[]
}

model MaintenanceHistory {
  id              String   @id @default(uuid()) @db.Uuid
  hubId           String?  @map("hubId") @db.Uuid
  sensorId        String?  @map("sensorId") @db.Uuid
  assetId         String?  @map("assetId") @db.Uuid
  maintenanceDate DateTime
  description     String

  hub       Hub?       @relation(fields: [hubId], references: [id], onDelete: Cascade)
  sensor    Sensor?    @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  parkAsset ParkAsset? @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Facility {
  id                  String             @id @default(uuid()) @db.Uuid
  name                String
  description         String
  isBookable          Boolean
  isPublic            Boolean
  isSheltered         Boolean
  facilityType        FacilityTypeEnum
  reservationPolicy   String
  rulesAndRegulations String
  images              String[]
  lastMaintenanceDate DateTime
  // nextMaintenanceDate   DateTime
  openingHours        DateTime[]
  closingHours        DateTime[]
  facilityStatus      FacilityStatusEnum
  lat                 Float
  long                Float
  size                Float
  capacity            Float
  fee                 Float
  parkId              Int
  hubs                Hub[]
  events              Event[]
  parkAssets          ParkAsset[]
  sensors             Sensor[]

  @@index([parkId])
}

enum FacilityTypeEnum {
  TOILET
  PLAYGROUND
  INFORMATION
  CARPARK
  ACCESSIBILITY
  STAGE
  WATER_FOUNTAIN
  PICNIC_AREA
  BBQ_PIT
  CAMPING_AREA
  AED
  FIRST_AID
  AMPHITHEATER
  GAZEBO
  STOREROOM
  OTHERS
}

enum FacilityStatusEnum {
  OPEN
  CLOSED
  UNDER_MAINTENANCE
}

enum PlantTaskStatusEnum {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PlantTaskTypeEnum {
  INSPECTION
  WATERING
  PRUNING_TRIMMING
  PEST_MANAGEMENT
  SOIL_MAINTENANCE
  STAKING_SUPPORTING
  DEBRIS_REMOVAL
  ENVIRONMENTAL_ADJUSTMENT
  OTHERS
}

enum PlantTaskUrgencyEnum {
  IMMEDIATE
  HIGH
  NORMAL
  LOW
}

model PlantTask {
  id                String               @id @default(uuid()) @db.Uuid
  title             String
  description       String
  taskStatus        PlantTaskStatusEnum
  taskType          PlantTaskTypeEnum
  taskUrgency       PlantTaskUrgencyEnum
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  dueDate           DateTime
  completedDate     DateTime?
  images            String[]
  remarks           String?
  occurrenceId      String               @db.Uuid
  occurrence        Occurrence           @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
  assignedStaffId   String?              @map("assignedStaffId") @db.Uuid
  assignedStaff     Staff?               @relation(name: "assignedStaff", fields: [assignedStaffId], references: [id])
  submittingStaffId String               @map("submittingStaffId") @db.Uuid
  submittingStaff   Staff                @relation(name: "submittingStaff", fields: [submittingStaffId], references: [id], onDelete: Cascade)
  position          Int
}

model DecarbonizationArea {
  id          String  @id @default(uuid()) @db.Uuid
  geom        String
  description String?
  name        String
  parkId      Int

  sequestrationHistory SequestrationHistory[]
}

model SequestrationHistory {
  id                    String              @id @default(uuid()) @db.Uuid
  date                  DateTime
  seqValue              Float
  decarbonizationAreaId String              @db.Uuid
  decarbonizationArea   DecarbonizationArea @relation(fields: [decarbonizationAreaId], references: [id], onDelete: Cascade)
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PromotionStatus {
  ENABLED
  DISABLED
}

model Promotion {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  discountType  DiscountType
  promoCode     String?
  isNParksWide  Boolean
  parkId        Int?
  images        String[]
  discountValue Float
  validFrom     DateTime
  validUntil    DateTime
  status        PromotionStatus
  terms         String[]
  maximumUsage  Int?
  minimumAmount Float?
  isOneTime     Boolean
  visitors      Visitor[]       @relation("VisitorPromotionsRedeemed")
}
