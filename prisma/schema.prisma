// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StaffRoleEnum {
  MANAGER
  BOTANIST
  ARBORIST
  LANDSCAPE_ARCHITECT
  PARK_RANGER
  VENDOR_MANAGER
  SUPERADMIN
}

model Staff {
  id             String        @id @default(uuid()) @db.Uuid
  firstName      String
  lastName       String
  email          String        @unique
  password       String
  contactNumber  String
  role           StaffRoleEnum
  isActive       Boolean
  isFirstLogin   Boolean
  resetTokenUsed Boolean       @default(false)
  resetToken     String?

  assignedPlantTasks        PlantTask[]       @relation("assignedPlantTasks")
  submittedPlantTasks       PlantTask[]       @relation("submittedPlantTasks")
  assignedMaintenanceTasks  MaintenanceTask[] @relation("assignedMaintenanceTasks")
  submittedMaintenanceTasks MaintenanceTask[] @relation("submittedMaintenanceTasks")
  resolvedFeedback          Feedback[]

  parkId Int? // relation to park
}

enum ConservationStatusEnum {
  LEAST_CONCERN
  NEAR_THREATENED
  VULNERABLE
  ENDANGERED
  CRITICALLY_ENDANGERED
  EXTINCT_IN_THE_WILD
  EXTINCT
}

enum LightTypeEnum {
  FULL_SUN
  PARTIAL_SHADE
  FULL_SHADE
}

enum SoilTypeEnum {
  SANDY
  CLAYEY
  LOAMY
}

model Species {
  id                    String                 @id @default(uuid()) @db.Uuid
  phylum                String
  class                 String
  order                 String
  family                String
  genus                 String
  speciesName           String                 @unique
  commonName            String
  speciesDescription    String
  conservationStatus    ConservationStatusEnum
  originCountry         String
  lightType             LightTypeEnum
  soilType              SoilTypeEnum
  fertiliserType        String
  images                String[]
  soilMoisture          Int
  fertiliserRequirement Int
  idealHumidity         Float
  minTemp               Float
  maxTemp               Float
  idealTemp             Float
  isDroughtTolerant     Boolean
  isFastGrowing         Boolean
  isSlowGrowing         Boolean
  isEdible              Boolean
  isDeciduous           Boolean
  isEvergreen           Boolean
  isToxic               Boolean
  isFragrant            Boolean

  occurrences Occurrence[]
  favoritedBy Visitor[]
}

enum DecarbonizationTypeEnum {
  TREE_TROPICAL
  TREE_MANGROVE
  SHRUB
}

enum OccurrenceStatusEnum {
  HEALTHY
  MONITOR_AFTER_TREATMENT
  NEEDS_ATTENTION
  URGENT_ACTION_REQUIRED
  REMOVED
}

model Occurrence {
  id                  String                  @id @default(uuid()) @db.Uuid
  lat                 Float?
  lng                 Float?
  title               String
  dateObserved        DateTime
  dateOfBirth         DateTime?
  numberOfPlants      Float
  biomass             Float
  description         String?
  occurrenceStatus    OccurrenceStatusEnum
  decarbonizationType DecarbonizationTypeEnum
  images              String[]

  activityLogs ActivityLog[]
  statusLogs   StatusLog[]
  plantTasks   PlantTask[]
  speciesId    String        @db.Uuid
  species      Species       @relation(fields: [speciesId], references: [id], onDelete: Cascade)

  zoneId Int // relation to zone

  @@index([zoneId])
}

enum ActivityLogTypeEnum {
  WATERED
  TRIMMED
  FERTILIZED
  PRUNED
  REPLANTED
  CHECKED_HEALTH
  PEST_MONITORING
  SOIL_REPLACED
  HARVESTED
  STAKED
  MULCHED
  MOVED
  CHECKED
  ADDED_COMPOST
  SHADE_ADJUSTMENT
  PLANT_PROPAGATION
  LIGHT_EXPOSURE_CHECK
  WATERING_ADJUSTMENT
  OTHERS
}

model ActivityLog {
  id              String              @id @default(uuid()) @db.Uuid
  name            String
  description     String
  dateCreated     DateTime
  images          String[]
  activityLogType ActivityLogTypeEnum

  occurrenceId String     @db.Uuid
  occurrence   Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
}

model StatusLog {
  id            String               @id @default(uuid()) @db.Uuid
  name          String
  description   String
  dateCreated   DateTime
  images        String[]
  statusLogType OccurrenceStatusEnum

  occurrenceId String     @db.Uuid
  occurrence   Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
}

enum AttractionStatusEnum {
  OPEN
  CLOSED
  UNDER_MAINTENANCE
}

model Attraction {
  id              String               @id @default(uuid()) @db.Uuid
  title           String
  description     String
  openingHours    DateTime[]
  closingHours    DateTime[]
  images          String[]
  status          AttractionStatusEnum
  maxCapacity     Int
  ticketingPolicy String
  lat             Float?
  lng             Float?

  attractionTicketListings     AttractionTicketListing[]
  attractionTicketTransactions AttractionTicketTransaction[]
  cameraSensorId                String?                @unique @db.Uuid
  cameraSensor                  Sensor?                @relation(fields: [cameraSensorId], references: [id])
  parkId                       Int // relation to park

  @@index([parkId])
}

enum AttractionTicketCategoryEnum {
  ADULT
  CHILD
  SENIOR
  STUDENT
}

enum AttractionTicketNationalityEnum {
  LOCAL
  STANDARD
}

model AttractionTicketListing {
  id          String                          @id @default(uuid()) @db.Uuid
  category    AttractionTicketCategoryEnum
  nationality AttractionTicketNationalityEnum
  description String
  price       Float
  isActive    Boolean

  attractionId      String             @db.Uuid
  attraction        Attraction         @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionTickets AttractionTicket[]
}

enum AttractionTicketStatusEnum {
  VALID
  INVALID
  USED
}

model AttractionTicket {
  id     String                     @id @default(uuid()) @db.Uuid
  price  Float
  status AttractionTicketStatusEnum

  attractionTicketListingId     String                      @db.Uuid
  attractionTicketTransactionId String                      @db.Uuid
  attractionTicketListing       AttractionTicketListing     @relation(fields: [attractionTicketListingId], references: [id], onDelete: Cascade)
  attractionTicketTransaction   AttractionTicketTransaction @relation(fields: [attractionTicketTransactionId], references: [id], onDelete: Cascade)
}

model AttractionTicketTransaction {
  id             String   @id @default(uuid()) @db.Uuid
  attractionDate DateTime
  purchaseDate   DateTime
  totalAmount    Float

  visitorId         String             @db.Uuid
  attractionId      String             @db.Uuid
  visitor           Visitor            @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  attraction        Attraction         @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionTickets AttractionTicket[]
}

enum EventStatusEnum {
  ONGOING
  UPCOMING
  COMPLETED
  CANCELLED
}

enum EventTypeEnum {
  WORKSHOP
  EXHIBITION
  GUIDED_TOUR
  PERFORMANCE
  TALK
  COMPETITION
  FESTIVAL
  CONFERENCE
}

enum EventSuitabilityEnum {
  ANYONE
  FAMILIES_AND_FRIENDS
  CHILDREN
  NATURE_ENTHUSIASTS
  PETS
  FITNESS_ENTHUSIASTS
}

model Event {
  id              String               @id @default(uuid()) @db.Uuid
  title           String
  description     String
  type            EventTypeEnum
  suitability     EventSuitabilityEnum
  startDate       DateTime
  endDate         DateTime
  startTime       DateTime
  endTime         DateTime
  maxCapacity     Int
  ticketingPolicy String
  images          String[]
  status          EventStatusEnum

  eventTicketListings     EventTicketListing[]
  eventTicketTransactions EventTicketTransaction[]

  facilityId String   @db.Uuid
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@index([facilityId])
}

enum EventTicketCategoryEnum {
  ADULT
  CHILD
  SENIOR
  STUDENT
}

enum EventTicketNationalityEnum {
  LOCAL
  STANDARD
}

model EventTicketListing {
  id          String                     @id @default(uuid()) @db.Uuid
  category    EventTicketCategoryEnum
  nationality EventTicketNationalityEnum
  description String
  price       Float
  isActive    Boolean

  eventId      String        @db.Uuid
  event        Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventTickets EventTicket[]
}

enum EventTicketStatusEnum {
  VALID
  INVALID
  USED
}

model EventTicket {
  id     String                @id @default(uuid()) @db.Uuid
  price  Float
  status EventTicketStatusEnum

  eventTicketListingId     String                 @db.Uuid
  eventTicketTransactionId String                 @db.Uuid
  eventTicketListing       EventTicketListing     @relation(fields: [eventTicketListingId], references: [id], onDelete: Cascade)
  eventTicketTransaction   EventTicketTransaction @relation(fields: [eventTicketTransactionId], references: [id], onDelete: Cascade)
}

model EventTicketTransaction {
  id           String   @id @default(uuid()) @db.Uuid
  eventDate    DateTime
  purchaseDate DateTime
  totalAmount  Float

  visitorId    String        @db.Uuid
  eventId      String        @db.Uuid
  event        Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  visitor      Visitor       @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  eventTickets EventTicket[]
}

model Visitor {
  id             String  @id @default(uuid()) @db.Uuid
  firstName      String
  lastName       String
  email          String  @unique
  password       String
  contactNumber  String
  isVerified     Boolean
  resetToken     String?
  resetTokenUsed Boolean @default(false)

  favoriteSpecies              Species[]
  attractionTicketTransactions AttractionTicketTransaction[]
  eventTicketTransactions      EventTicketTransaction[]
  promotionsRedeemed           Promotion[]

  bookings Booking[]
  feedback Feedback[] // feedback is plural
}

enum HubStatusEnum {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
  DECOMMISSIONED
}

model Hub {
  id                       String        @id @default(uuid()) @db.Uuid
  identifierNumber         String        @unique
  serialNumber             String        @unique
  name                     String
  description              String?
  hubStatus                HubStatusEnum
  acquisitionDate          DateTime
  nextMaintenanceDate      DateTime?
  nextMaintenanceDates     DateTime[]
  dataTransmissionInterval Int?
  supplier                 String
  supplierContactNumber    String
  ipAddress                String?
  macAddress               String?
  radioGroup               Int?
  hubSecret                String?
  images                   String[]
  lat                      Float?
  long                     Float?
  remarks                  String?
  lastDataUpdateDate       DateTime?

  facilityId String?   @db.Uuid
  facility   Facility? @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  sensors          Sensor[]
  maintenanceTasks MaintenanceTask[]

  rfModel   RfModel?
  rfModelId String?  @db.Uuid

  zoneId Int? // relation to zone

  @@index([zoneId])
}

enum SensorTypeEnum {
  TEMPERATURE
  HUMIDITY
  SOIL_MOISTURE
  LIGHT
  CAMERA
}

enum SensorStatusEnum {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
  DECOMMISSIONED
}

enum SensorUnitEnum {
  PERCENT
  DEGREES_CELSIUS
  VOLUMETRIC_WATER_CONTENT
  LUX
  PAX
}

model Sensor {
  id                    String            @id @default(uuid()) @db.Uuid
  name                  String
  identifierNumber      String            @unique
  serialNumber          String            @unique
  sensorType            SensorTypeEnum
  description           String?
  sensorStatus          SensorStatusEnum
  acquisitionDate       DateTime
  nextMaintenanceDate   DateTime?
  nextMaintenanceDates  DateTime[]
  sensorUnit            SensorUnitEnum
  supplier              String
  supplierContactNumber String
  images                String[]
  lat                   Float?
  long                  Float?
  remarks               String?
  hubId                 String?           @db.Uuid
  hub                   Hub?              @relation(fields: [hubId], references: [id])
  facilityId            String?           @db.Uuid
  facility              Facility?         @relation("storageFacility", fields: [facilityId], references: [id], onDelete: Cascade)
  sensorReadings        SensorReading[]
  maintenanceTasks      MaintenanceTask[]

  cameraAttraction      Attraction?       
  cameraFacility        Facility?         
}

model SensorReading {
  id    String   @id @default(uuid()) @db.Uuid
  date  DateTime
  value Float

  sensorId String @db.Uuid
  sensor   Sensor @relation(fields: [sensorId], references: [id], onDelete: Cascade)
}

model HistoricalRainData {
  id          String   @id @default(uuid()) @db.Uuid
  stationId   String
  stationName String
  lat         Float
  lng         Float
  value       Float
  timestamp   DateTime
}

model RfModel {
  id        String   @id @default(uuid()) @db.Uuid
  modelData Json
  createdAt DateTime @default(now())
  hubId     String   @unique @db.Uuid
  hub       Hub      @relation(fields: [hubId], references: [id], onDelete: Cascade)
}

enum ParkAssetTypeEnum {
  PLANT_TOOL_AND_EQUIPMENT
  HOSES_AND_PIPES
  INFRASTRUCTURE
  LANDSCAPING
  GENERAL_TOOLS
  SAFETY
  DIGITAL
  EVENT
}

enum ParkAssetStatusEnum {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  DECOMMISSIONED
}

enum ParkAssetConditionEnum {
  EXCELLENT
  FAIR
  POOR
  DAMAGED
}

model ParkAsset {
  id                    String                 @id @default(uuid()) @db.Uuid
  identifierNumber      String                 @unique
  serialNumber          String?                @unique
  name                  String
  parkAssetType         ParkAssetTypeEnum
  description           String?
  parkAssetStatus       ParkAssetStatusEnum
  acquisitionDate       DateTime
  nextMaintenanceDate   DateTime?
  nextMaintenanceDates  DateTime[]
  supplier              String
  supplierContactNumber String
  parkAssetCondition    ParkAssetConditionEnum
  images                String[]
  remarks               String?

  facilityId       String            @db.Uuid
  facility         Facility          @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  maintenanceTasks MaintenanceTask[]
}

model Facility {
  id                  String             @id @default(uuid()) @db.Uuid
  name                String
  description         String
  isBookable          Boolean
  isPublic            Boolean
  isSheltered         Boolean
  facilityType        FacilityTypeEnum
  reservationPolicy   String
  rulesAndRegulations String
  images              String[]
  openingHours        DateTime[]
  closingHours        DateTime[]
  facilityStatus      FacilityStatusEnum
  lat                 Float
  long                Float
  size                Float
  capacity            Float
  fee                 Float

  hubs             Hub[]
  events           Event[]
  parkAssets       ParkAsset[]
  sensors          Sensor[]          @relation("storageFacility")
  maintenanceTasks MaintenanceTask[]
  bookings         Booking[]
  cameraSensorId        String?           @unique @db.Uuid
  cameraSensor          Sensor?           @relation(fields: [cameraSensorId], references: [id])

  parkId Int // relation to park

  @@index([parkId])
}

enum FacilityTypeEnum {
  TOILET
  PLAYGROUND
  INFORMATION
  CARPARK
  ACCESSIBILITY
  STAGE
  WATER_FOUNTAIN
  PICNIC_AREA
  BBQ_PIT
  CAMPING_AREA
  AED
  FIRST_AID
  AMPHITHEATER
  GAZEBO
  STOREROOM
  OTHERS
}

enum FacilityStatusEnum {
  OPEN
  CLOSED
  UNDER_MAINTENANCE
}

enum PlantTaskStatusEnum {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PlantTaskTypeEnum {
  INSPECTION
  WATERING
  PRUNING_TRIMMING
  PEST_MANAGEMENT
  SOIL_MAINTENANCE
  STAKING_SUPPORTING
  DEBRIS_REMOVAL
  ENVIRONMENTAL_ADJUSTMENT
  OTHERS
}

enum PlantTaskUrgencyEnum {
  IMMEDIATE
  HIGH
  NORMAL
  LOW
}

model PlantTask {
  id            String               @id @default(uuid()) @db.Uuid
  title         String
  description   String
  taskStatus    PlantTaskStatusEnum
  taskType      PlantTaskTypeEnum
  taskUrgency   PlantTaskUrgencyEnum
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  dueDate       DateTime
  completedDate DateTime?
  images        String[]
  remarks       String?
  position      Int

  occurrenceId      String     @db.Uuid
  occurrence        Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
  assignedStaffId   String?    @db.Uuid
  assignedStaff     Staff?     @relation("assignedPlantTasks", fields: [assignedStaffId], references: [id])
  submittingStaffId String     @db.Uuid
  submittingStaff   Staff      @relation("submittedPlantTasks", fields: [submittingStaffId], references: [id], onDelete: Cascade)
}

enum MaintenanceTaskStatusEnum {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenanceTaskTypeEnum {
  INSPECTION
  CLEANING
  REPAIR
  PLUMBING
  ELECTRICAL
  HEAT_AND_AIR_CONDITIONING
  CALIBRATION
  SOFTWARE_UPDATE
  HARDWARE_REPLACEMENT
  TESTING
  ASSET_RELOCATION
  FIRE_SAFETY
  SECURITY_CHECK
  WASTE_MANAGEMENT
  OTHERS
}

enum MaintenanceTaskUrgencyEnum {
  IMMEDIATE
  HIGH
  NORMAL
  LOW
}

model MaintenanceTask {
  id            String                     @id @default(uuid()) @db.Uuid
  title         String
  description   String
  taskStatus    MaintenanceTaskStatusEnum
  taskType      MaintenanceTaskTypeEnum
  taskUrgency   MaintenanceTaskUrgencyEnum
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  dueDate       DateTime
  completedDate DateTime?
  images        String[]
  remarks       String?
  position      Int

  assignedStaffId   String?    @db.Uuid
  assignedStaff     Staff?     @relation("assignedMaintenanceTasks", fields: [assignedStaffId], references: [id])
  submittingStaffId String     @db.Uuid
  submittingStaff   Staff      @relation("submittedMaintenanceTasks", fields: [submittingStaffId], references: [id], onDelete: Cascade)
  facilityId        String?    @db.Uuid
  facility          Facility?  @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  parkAssetId       String?    @db.Uuid
  parkAsset         ParkAsset? @relation(fields: [parkAssetId], references: [id], onDelete: Cascade)
  sensorId          String?    @db.Uuid
  sensor            Sensor?    @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  hubId             String?    @db.Uuid
  hub               Hub?       @relation(fields: [hubId], references: [id], onDelete: Cascade)
}

model DecarbonizationArea {
  id          String  @id @default(uuid()) @db.Uuid
  geom        String
  description String?
  name        String

  parkId               Int // relation to park
  sequestrationHistory SequestrationHistory[]
}

model SequestrationHistory {
  id       String   @id @default(uuid()) @db.Uuid
  date     DateTime
  seqValue Float

  decarbonizationAreaId String              @db.Uuid
  decarbonizationArea   DecarbonizationArea @relation(fields: [decarbonizationAreaId], references: [id], onDelete: Cascade)
}

model Feedback {
  id               String               @id @default(uuid()) @db.Uuid
  dateCreated      DateTime             @default(now())
  dateResolved     DateTime?
  title            String
  description      String
  feedbackCategory FeedbackCategoryEnum
  images           String[]
  feedbackStatus   FeedbackStatusEnum
  remarks          String?
  needResponse     Boolean

  resolvedStaffId String? @db.Uuid
  resolvedStaff   Staff?  @relation(fields: [resolvedStaffId], references: [id])
  visitorId       String  @db.Uuid
  visitor         Visitor @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  parkId Int // relation to park
}

enum FeedbackCategoryEnum {
  FACILITIES
  SERVICES
  STAFF
  SAFETY
  CLEANLINESS
  ACCESSIBILITY
  EVENTS
  WILDLIFE
  OTHER
}

enum FeedbackStatusEnum {
  PENDING
  ACCEPTED
  REJECTED
}

enum DiscountTypeEnum {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PromotionStatusEnum {
  ENABLED
  DISABLED
}

model Promotion {
  id            String              @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  discountType  DiscountTypeEnum
  promoCode     String?
  isNParksWide  Boolean
  images        String[]
  discountValue Float
  validFrom     DateTime
  validUntil    DateTime
  status        PromotionStatusEnum
  terms         String[]
  maximumUsage  Int?
  minimumAmount Float?

  parkId   Int? // relation to park
  visitors Visitor[]
}

enum FAQStatusEnum {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
}

enum FAQCategoryEnum {
  GENERAL
  PARK_RULES
  FACILITIES
  EVENTS
  SAFETY
  ACCESSIBILITY
  SERVICES
  TICKETING
  PARK_HISTORY
  OTHER
}

model FAQ {
  id       String          @id @default(uuid()) @db.Uuid
  category FAQCategoryEnum
  question String
  answer   String
  status   FAQStatusEnum
  priority Int?

  parkId Int? // relation to park

  @@index([parkId])
}

enum AnnouncementStatusEnum {
  UPCOMING
  ACTIVE
  INACTIVE
  EXPIRED
}

model Announcement {
  id        String                 @id @default(uuid()) @db.Uuid
  title     String
  content   String
  updatedAt DateTime
  startDate DateTime
  endDate   DateTime
  status    AnnouncementStatusEnum

  parkId Int? // relation to park
}

model Booking {
  id              String            @id @default(uuid()) @db.Uuid
  bookingPurpose  String
  pax             Int
  bookingStatus   BookingStatusEnum
  dateStart       DateTime
  dateEnd         DateTime
  dateBooked      DateTime
  // applicationStatusDate   DateTime
  paymentDeadline DateTime?
  visitorRemarks  String

  facilityId String   @db.Uuid
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  visitorId  String   @db.Uuid
  visitor    Visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
}

enum BookingStatusEnum {
  PENDING
  CANCELLED
  REJECTED
  APPROVED_PENDING_PAYMENT
  CONFIRMED
}
