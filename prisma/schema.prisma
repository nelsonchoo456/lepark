// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StaffRoleEnum {
  MANAGER
  BOTANIST
  ARBORIST
  LANDSCAPE_ARCHITECT
  PARK_RANGER
  VENDOR_MANAGER
  SUPERADMIN
}

model Staff {
  id            String        @id @default(uuid()) @db.Uuid
  firstName     String
  lastName      String
  email         String        @unique
  password      String
  contactNumber String
  role          StaffRoleEnum
  isActive      Boolean
  parkId        Int?      
  isFirstLogin  Boolean 
  resetTokenUsed Boolean @default(false)
  resetToken String?
}

enum ConservationStatusEnum {
  LEAST_CONCERN
  NEAR_THREATENED
  VULNERABLE
  ENDANGERED
  CRITICALLY_ENDANGERED
  EXTINCT_IN_THE_WILD
  EXTINCT
}

enum LightTypeEnum {
  FULL_SUN
  PARTIAL_SHADE
  FULL_SHADE
}

enum SoilTypeEnum {
  SANDY
  CLAYEY
  LOAMY
}

model Species {
  id                    String                 @id @default(uuid()) @db.Uuid
  phylum                String
  class                 String
  order                 String
  family                String
  genus                 String
  speciesName           String                 @unique
  commonName            String
  speciesDescription    String
  conservationStatus    ConservationStatusEnum
  originCountry         String
  lightType             LightTypeEnum
  soilType              SoilTypeEnum
  fertiliserType        String
  images                String[]
  waterRequirement      Int
  fertiliserRequirement Int
  idealHumidity         Float
  minTemp               Float
  maxTemp               Float
  idealTemp             Float
  isDroughtTolerant     Boolean
  isFastGrowing         Boolean
  isSlowGrowing         Boolean
  isEdible              Boolean
  isDeciduous           Boolean
  isEvergreen           Boolean
  isToxic               Boolean
  isFragrant            Boolean
  occurrences           Occurrence[]
  favoritedBy           Visitor[]              @relation("VisitorfavoriteSpecies")
}

enum DecarbonizationTypeEnum {
  TREE_TROPICAL
  TREE_MANGROVE
  SHRUB
}

enum OccurrenceStatusEnum {
  HEALTHY
  MONITOR_AFTER_TREATMENT
  NEEDS_ATTENTION
  URGENT_ACTION_REQUIRED
  REMOVED
}

model Occurrence {
  id                  String                  @id @default(uuid()) @db.Uuid
  lat                 Float?
  lng                 Float?
  title               String
  dateObserved        DateTime
  dateOfBirth         DateTime?
  numberOfPlants      Float
  biomass             Float
  description         String?
  occurrenceStatus    OccurrenceStatusEnum
  decarbonizationType DecarbonizationTypeEnum
  speciesId           String                  @db.Uuid
  zoneId              Int

  // decarbonizationAreaId String @db.Uuid
  images       String[]
  activityLogs ActivityLog[]
  statusLogs   StatusLog[]

  species Species @relation(fields: [speciesId], references: [id], onDelete: Cascade)
  // decarbonizationArea DecarbonizationArea @relation(fields: [decarbonizationAreaId], references: [id], onDelete: Cascade)

  @@index([zoneId])
}

enum ActivityLogTypeEnum {
  WATERED
  TRIMMED
  FERTILIZED
  PRUNED
  REPLANTED
  CHECKED_HEALTH
  TREATED_PESTS
  SOIL_REPLACED
  HARVESTED
  STAKED
  MULCHED
  MOVED
  CHECKED
  ADDED_COMPOST
  OTHERS
}

model ActivityLog {
  id              String              @id @default(uuid()) @db.Uuid
  name            String
  description     String
  dateCreated     DateTime
  images          String[]
  activityLogType ActivityLogTypeEnum
  occurrenceId    String              @map("occurrenceId") @db.Uuid

  occurrence Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
}

model StatusLog {
  id            String               @id @default(uuid()) @db.Uuid
  name          String
  description   String
  dateCreated   DateTime
  images        String[]
  statusLogType OccurrenceStatusEnum
  occurrenceId  String               @map("occurrenceId") @db.Uuid

  occurrence Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
}

enum AttractionStatusEnum {
  OPEN
  CLOSED
  UNDER_MAINTENANCE
}

model Attraction {
  id              String    @id @default(uuid()) @db.Uuid
  title           String
  description     String
  openingHours    DateTime[]
  closingHours    DateTime[]
  images          String[]
  status          AttractionStatusEnum
  lat             Float?
  lng             Float?
  parkId          Int

  @@index([parkId])
}

// model DecarbonizationArea {
//   id                  String   @id @default(uuid()) @db.Uuid
//   carbonSeqValue      Float
//   startDate           DateTime
//   endDate             DateTime
//   carbonSeqFactor     Float
//   dailyCarbonSeqValye Float
//   totalBiomass        Float
//   occurrenceId         String

//   occurrences Occurrence[]
// }

// enum PARK_STATUS_ENUM {
//   OPEN 
//   CLOSED
//   UNDER_CONSTRUCTION
//   LIMITED_ACCESS
// }

// model Park {
//   id           Int     @id @default(autoincrement())
//   name         String
//   description  String
//   parkStatus   PARK_STATUS_ENUM
//   openingHours DateTime[]
//   closingHours DateTime[]
//   geom         String
//   paths        String
// }

model Visitor {
  id              String    @id @default(uuid()) @db.Uuid
  firstName       String
  lastName        String
  email           String    @unique
  password        String
  contactNumber   String
  favoriteSpecies Species[] @relation("VisitorfavoriteSpecies")
  isVerified      Boolean
  resetToken      String?
  resetTokenUsed  Boolean   @default(false)
}

enum HubStatusEnum {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
  DECOMMISSIONED
}

model Hub {
  id                                  String        @id @default(uuid()) @db.Uuid
  serialNumber                        String        @unique
  name                                String
  description                         String?
  hubStatus                           HubStatusEnum
  acquisitionDate                     DateTime
  //lastCalibratedDate                  DateTime
  recommendedCalibrationFrequencyDays Int
  recommendedMaintenanceDuration      Int
  //lastMaintenanceDate                 DateTime
  nextMaintenanceDate                 DateTime
  dataTransmissionInterval            Float
  ipAddress                           String
  macAddress                          String
  radioGroup                          Int
  hubSecret                           String
  images                              String[]
  lat                                 Float?
  long                                Float?
  remarks                             String?
  zoneId                              Int? // for when installed in a zone
  facilityId                          String?  @db.Uuid
  facility                            Facility? @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  maintenanceHistory MaintenanceHistory[]
  calibrationHistory CalibrationHistory[]
  usageMetrics       UsageMetrics[]
  sensors            Sensor[]

  //facility Facility? @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@index([zoneId])
}

model Sensor {
  id String @id @default(uuid()) @db.Uuid

  maintenanceHistory MaintenanceHistory[]
  calibrationHistory CalibrationHistory[]
  usageMetrics       UsageMetrics[]
  Hub                Hub?                 @relation(fields: [hubId], references: [id])
  hubId              String?              @db.Uuid
}

model Asset {
  id String @id @default(uuid()) @db.Uuid

  maintenanceHistory MaintenanceHistory[]
}

model MaintenanceHistory {
  id              String   @id @default(uuid()) @db.Uuid
  hubId           String?  @map("hubId") @db.Uuid
  sensorId        String?  @map("sensorId") @db.Uuid
  assetId         String?  @map("assetId") @db.Uuid
  maintenanceDate DateTime
  description     String

  hub    Hub?    @relation(fields: [hubId], references: [id], onDelete: Cascade)
  sensor Sensor? @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  asset  Asset?  @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model CalibrationHistory {
  id              String   @id @default(uuid()) @db.Uuid
  hubId           String?  @map("hubId") @db.Uuid
  sensorId        String?  @map("sensorId") @db.Uuid
  calibrationDate DateTime
  description     String

  hub    Hub?    @relation(fields: [hubId], references: [id], onDelete: Cascade)
  sensor Sensor? @relation(fields: [sensorId], references: [id], onDelete: Cascade)
}

model UsageMetrics {
  id          String  @id @default(uuid()) @db.Uuid
  hubId       String? @map("hubId") @db.Uuid
  sensorId    String? @map("sensorId") @db.Uuid
  uptime      Float
  downtime    Float
  dataVolume  Float
  description String

  hub    Hub?    @relation(fields: [hubId], references: [id], onDelete: Cascade)
  sensor Sensor? @relation(fields: [sensorId], references: [id], onDelete: Cascade)
}

model Facility {
  id                    String    @id @default(uuid()) @db.Uuid
  facilityName          String
  facilityDescription   String
  isBookable            Boolean
  isPublic              Boolean
  isSheltered           Boolean
  facilityType          FacilityTypeEnum
  reservationPolicy     String
  rulesAndRegulations   String
  images                String[]
  lastMaintenanceDate   DateTime
  nextMaintenanceDate   DateTime
  openingHours          DateTime[]
  closingHours          DateTime[]
  facilityStatus        FacilityStatusEnum
  lat                   Float
  long                   Float
  size                  Float
  capacity              Float
  fee                   Float
  parkId                Int
  hubs                  Hub[]
}

enum FacilityTypeEnum {
  TOILET
  PLAYGROUND
  INFORMATION
  CARPARK
  ACCESSIBILITY
  STAGE
  WATER_FOUNTAIN
  PICNIC_AREA
  BBQ_PIT
  CAMPING_AREA
  AED
  FIRST_AID
  AMPHITHEATER
  GAZEBO
  STOREROOM
  OTHERS
}

enum FacilityStatusEnum {
  OPEN
  CLOSED
  MAINTENANCE
}